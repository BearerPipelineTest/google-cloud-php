{"id":".split\/go\/github.com\/libgit2\/git2go\/readme","type":"guide","title":"git2go","name":"git2go","description":"<body>\n<p><a href=\"http:\/\/godoc.org\/github.com\/libgit2\/git2go\"><img src=\"https:\/\/godoc.org\/github.com\/libgit2\/git2go?status.svg\" alt=\"GoDoc\"><\/a> <a href=\"https:\/\/travis-ci.org\/libgit2\/git2go\"><img src=\"https:\/\/travis-ci.org\/libgit2\/git2go.svg?branch=master\" alt=\"Build Status\"><\/a><\/p>\n<p>Go bindings for <a href=\"http:\/\/libgit2.github.com\/\">libgit2<\/a>. The <code>master<\/code> branch follows the latest libgit2 release. The versioned branches indicate which libgit2 version they work against.<\/p>\n<h2>Installing<\/h2>\n<p>This project wraps the functionality provided by libgit2. If you're using a stable version, install it to your system via your system's package manager and then install git2go as usual.<\/p>\n<p>Otherwise (<code>next<\/code> which tracks an unstable version), we need to build libgit2 as well. In order to build it, you need <code>cmake<\/code>, <code>pkg-config<\/code> and a C compiler. You will also need the development packages for OpenSSL and LibSSH2 installed if you want libgit2 to support HTTPS and SSH respectively.<\/p>\n<h3>Stable version<\/h3>\n<p>git2go has <code>master<\/code> which tracks the latest release of libgit2, and versioned branches which indicate which version of libgit2 they work against. Install the development package on your system via your favourite package manager or from source and you can use a service like gopkg.in to use the appropriate version. For the libgit2 v0.22 case, you can use<\/p>\n<pre><code>import \"gopkg.in\/libgit2\/git2go.v22\"<\/code><\/pre>\n<p>to use a version of git2go which will work against libgit2 v0.22 and dynamically link to the library. You can use<\/p>\n<pre><code>import \"github.com\/libgit2\/git2go\"<\/code><\/pre>\n<p>to use the 'master' branch, which works against the latest release of libgit2, whichever that one is at the time.<\/p>\n<h3>From <code>next<\/code><\/h3>\n<p>The <code>next<\/code> branch follows libgit2's master branch, which means there is no stable API or ABI to link against. git2go can statically link against a vendored version of libgit2.<\/p>\n<p>Run <code>go get -d github.com\/libgit2\/git2go<\/code> to download the code and go to your <code>$GOPATH\/src\/github.com\/libgit2\/git2go<\/code> directory. From there, we need to build the C code and put it into the resulting go binary.<\/p>\n<pre><code>git checkout next\ngit submodule update --init # get libgit2\nmake install<\/code><\/pre>\n<p>will compile libgit2. Run <code>go install<\/code> so that it's statically linked to the git2go package.<\/p>\n<h2>Parallelism and network operations<\/h2>\n<p>libgit2 uses OpenSSL and LibSSH2 for performing encrypted network connections. For now, git2go asks libgit2 to set locking for OpenSSL. This makes HTTPS connections thread-safe, but it is fragile and will likely stop doing it soon. This may also make SSH connections thread-safe if your copy of libssh2 is linked against OpenSSL. Check libgit2's <code>THREADSAFE.md<\/code> for more information.<\/p>\n<h2>Running the tests<\/h2>\n<p>For the stable version, <code>go test<\/code> will work as usual. For the <code>next<\/code> branch, similarly to installing, running the tests requires building a local libgit2 library, so the Makefile provides a wrapper that makes sure it's built<\/p>\n<pre><code>make test<\/code><\/pre>\n<p>Alternatively, you can build the library manually first and then run the tests<\/p>\n<pre><code>.\/script\/build-libgit2-static.sh\ngo test -v<\/code><\/pre>\n<h2>License<\/h2>\n<p>M to the I to the T. See the LICENSE file if you've never seen a MIT license before.<\/p>\n<h2>Authors<\/h2>\n<ul>\n<li>Carlos Mart\u00c3\u00adn (@carlosmn)<\/li>\n<li>Vicent Mart\u00c3\u00ad (@vmg)<\/li>\n<\/ul><\/body>","methods":[]}