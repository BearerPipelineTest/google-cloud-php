{"id":".split\/go\/github.com\/boltdb\/bolt\/readme","type":"guide","title":"Bolt   ","name":"Bolt   ","description":"<body>\n<p>Bolt is a pure Go key\/value store inspired by <a href=\"https:\/\/twitter.com\/hyc_symas\">Howard Chu's<\/a>\n<a href=\"http:\/\/symas.com\/mdb\/\">LMDB project<\/a>. The goal of the project is to provide a simple,\nfast, and reliable database for projects that don't require a full database\nserver such as Postgres or MySQL.<\/p>\n<p>Since Bolt is meant to be used as such a low-level piece of functionality,\nsimplicity is key. The API will be small and only focus on getting values\nand setting values. That's it.<\/p>\n<h2>Project Status<\/h2>\n<p>Bolt is stable, the API is fixed, and the file format is fixed. Full unit\ntest coverage and randomized black box testing are used to ensure database\nconsistency and thread safety. Bolt is currently used in high-load production\nenvironments serving databases as large as 1TB. Many companies such as\nShopify and Heroku use Bolt-backed services every day.<\/p>\n<h2>A message from the author<\/h2>\n<blockquote>\n<p>The original goal of Bolt was to provide a simple pure Go key\/value store and to\nnot bloat the code with extraneous features. To that end, the project has been\na success. However, this limited scope also means that the project is complete.<\/p>\n<p>Maintaining an open source database requires an immense amount of time and energy.\nChanges to the code can have unintended and sometimes catastrophic effects so\neven simple changes require hours and hours of careful testing and validation.<\/p>\n<p>Unfortunately I no longer have the time or energy to continue this work. Bolt is\nin a stable state and has years of successful production use. As such, I feel that\nleaving it in its current state is the most prudent course of action.<\/p>\n<p>If you are interested in using a more featureful version of Bolt, I suggest that\nyou look at the CoreOS fork called <a href=\"https:\/\/github.com\/coreos\/bbolt\">bbolt<\/a>.<\/p>\n<\/blockquote>\n<ul>\n<li>Ben Johnson (<a href=\"https:\/\/twitter.com\/benbjohnson\">@benbjohnson<\/a>)<\/li>\n<\/ul>\n<h2>Table of Contents<\/h2>\n<ul>\n<li><a href=\"#getting-started\">Getting Started<\/a>\n<ul>\n<li><a href=\"#installing\">Installing<\/a><\/li>\n<li><a href=\"#opening-a-database\">Opening a database<\/a><\/li>\n<li><a href=\"#transactions\">Transactions<\/a><\/li>\n<li><a href=\"#read-write-transactions\">Read-write transactions<\/a><\/li>\n<li><a href=\"#read-only-transactions\">Read-only transactions<\/a><\/li>\n<li><a href=\"#batch-read-write-transactions\">Batch read-write transactions<\/a><\/li>\n<li><a href=\"#managing-transactions-manually\">Managing transactions manually<\/a><\/li>\n<li><a href=\"#using-buckets\">Using buckets<\/a><\/li>\n<li><a href=\"#using-keyvalue-pairs\">Using key\/value pairs<\/a><\/li>\n<li><a href=\"#autoincrementing-integer-for-the-bucket\">Autoincrementing integer for the bucket<\/a><\/li>\n<li><a href=\"#iterating-over-keys\">Iterating over keys<\/a><\/li>\n<li><a href=\"#prefix-scans\">Prefix scans<\/a><\/li>\n<li><a href=\"#range-scans\">Range scans<\/a><\/li>\n<li><a href=\"#foreach\">ForEach()<\/a><\/li>\n<li><a href=\"#nested-buckets\">Nested buckets<\/a><\/li>\n<li><a href=\"#database-backups\">Database backups<\/a><\/li>\n<li><a href=\"#statistics\">Statistics<\/a><\/li>\n<li><a href=\"#read-only-mode\">Read-Only Mode<\/a><\/li>\n<li><a href=\"#mobile-use-iosandroid\">Mobile Use (iOS\/Android)<\/a><\/li>\n<\/ul><\/li>\n<li><a href=\"#resources\">Resources<\/a><\/li>\n<li><a href=\"#comparison-with-other-databases\">Comparison with other databases<\/a>\n<ul>\n<li><a href=\"#postgres-mysql--other-relational-databases\">Postgres, MySQL, &amp; other relational databases<\/a><\/li>\n<li><a href=\"#leveldb-rocksdb\">LevelDB, RocksDB<\/a><\/li>\n<li><a href=\"#lmdb\">LMDB<\/a><\/li>\n<\/ul><\/li>\n<li><a href=\"#caveats--limitations\">Caveats &amp; Limitations<\/a><\/li>\n<li><a href=\"#reading-the-source\">Reading the Source<\/a><\/li>\n<li><a href=\"#other-projects-using-bolt\">Other Projects Using Bolt<\/a><\/li>\n<\/ul>\n<h2>Getting Started<\/h2>\n<h3>Installing<\/h3>\n<p>To start using Bolt, install Go and run <code>go get<\/code>:<\/p>\n<pre><code class=\"language-sh\">$ go get github.com\/boltdb\/bolt\/...<\/code><\/pre>\n<p>This will retrieve the library and install the <code>bolt<\/code> command line utility into\nyour <code>$GOBIN<\/code> path.<\/p>\n<h3>Opening a database<\/h3>\n<p>The top-level object in Bolt is a <code>DB<\/code>. It is represented as a single file on\nyour disk and represents a consistent snapshot of your data.<\/p>\n<p>To open your database, simply use the <code>bolt.Open()<\/code> function:<\/p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"log\"\n\n    \"github.com\/boltdb\/bolt\"\n)\n\nfunc main() {\n    \/\/ Open the my.db data file in your current directory.\n    \/\/ It will be created if it doesn't exist.\n    db, err := bolt.Open(\"my.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n\n    ...\n}<\/code><\/pre>\n<p>Please note that Bolt obtains a file lock on the data file so multiple processes\ncannot open the same database at the same time. Opening an already open Bolt\ndatabase will cause it to hang until the other process closes it. To prevent\nan indefinite wait you can pass a timeout option to the <code>Open()<\/code> function:<\/p>\n<pre><code class=\"language-go\">db, err := bolt.Open(\"my.db\", 0600, &amp;bolt.Options{Timeout: 1 * time.Second})<\/code><\/pre>\n<h3>Transactions<\/h3>\n<p>Bolt allows only one read-write transaction at a time but allows as many\nread-only transactions as you want at a time. Each transaction has a consistent\nview of the data as it existed when the transaction started.<\/p>\n<p>Individual transactions and all objects created from them (e.g. buckets, keys)\nare not thread safe. To work with data in multiple goroutines you must start\na transaction for each one or use locking to ensure only one goroutine accesses\na transaction at a time. Creating transaction from the <code>DB<\/code> is thread safe.<\/p>\n<p>Read-only transactions and read-write transactions should not depend on one\nanother and generally shouldn't be opened simultaneously in the same goroutine.\nThis can cause a deadlock as the read-write transaction needs to periodically\nre-map the data file but it cannot do so while a read-only transaction is open.<\/p>\n<h4>Read-write transactions<\/h4>\n<p>To start a read-write transaction, you can use the <code>DB.Update()<\/code> function:<\/p>\n<pre><code class=\"language-go\">err := db.Update(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})<\/code><\/pre>\n<p>Inside the closure, you have a consistent view of the database. You commit the\ntransaction by returning <code>nil<\/code> at the end. You can also rollback the transaction\nat any point by returning an error. All database operations are allowed inside\na read-write transaction.<\/p>\n<p>Always check the return error as it will report any disk failures that can cause\nyour transaction to not complete. If you return an error within your closure\nit will be passed through.<\/p>\n<h4>Read-only transactions<\/h4>\n<p>To start a read-only transaction, you can use the <code>DB.View()<\/code> function:<\/p>\n<pre><code class=\"language-go\">err := db.View(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})<\/code><\/pre>\n<p>You also get a consistent view of the database within this closure, however,\nno mutating operations are allowed within a read-only transaction. You can only\nretrieve buckets, retrieve values, and copy the database within a read-only\ntransaction.<\/p>\n<h4>Batch read-write transactions<\/h4>\n<p>Each <code>DB.Update()<\/code> waits for disk to commit the writes. This overhead\ncan be minimized by combining multiple updates with the <code>DB.Batch()<\/code>\nfunction:<\/p>\n<pre><code class=\"language-go\">err := db.Batch(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})<\/code><\/pre>\n<p>Concurrent Batch calls are opportunistically combined into larger\ntransactions. Batch is only useful when there are multiple goroutines\ncalling it.<\/p>\n<p>The trade-off is that <code>Batch<\/code> can call the given\nfunction multiple times, if parts of the transaction fail. The\nfunction must be idempotent and side effects must take effect only\nafter a successful return from <code>DB.Batch()<\/code>.<\/p>\n<p>For example: don't display messages from inside the function, instead\nset variables in the enclosing scope:<\/p>\n<pre><code class=\"language-go\">var id uint64\nerr := db.Batch(func(tx *bolt.Tx) error {\n    \/\/ Find last key in bucket, decode as bigendian uint64, increment\n    \/\/ by one, encode back to []byte, and add new key.\n    ...\n    id = newValue\n    return nil\n})\nif err != nil {\n    return ...\n}\nfmt.Println(\"Allocated ID %d\", id)<\/code><\/pre>\n<h4>Managing transactions manually<\/h4>\n<p>The <code>DB.View()<\/code> and <code>DB.Update()<\/code> functions are wrappers around the <code>DB.Begin()<\/code>\nfunction. These helper functions will start the transaction, execute a function,\nand then safely close your transaction if an error is returned. This is the\nrecommended way to use Bolt transactions.<\/p>\n<p>However, sometimes you may want to manually start and end your transactions.\nYou can use the <code>DB.Begin()<\/code> function directly but <strong>please<\/strong> be sure to close\nthe transaction.<\/p>\n<pre><code class=\"language-go\">\/\/ Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n\/\/ Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n\/\/ Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}<\/code><\/pre>\n<p>The first argument to <code>DB.Begin()<\/code> is a boolean stating if the transaction\nshould be writable.<\/p>\n<h3>Using buckets<\/h3>\n<p>Buckets are collections of key\/value pairs within the database. All keys in a\nbucket must be unique. You can create a bucket using the <code>DB.CreateBucket()<\/code>\nfunction:<\/p>\n<pre><code class=\"language-go\">db.Update(func(tx *bolt.Tx) error {\n    b, err := tx.CreateBucket([]byte(\"MyBucket\"))\n    if err != nil {\n        return fmt.Errorf(\"create bucket: %s\", err)\n    }\n    return nil\n})<\/code><\/pre>\n<p>You can also create a bucket only if it doesn't exist by using the\n<code>Tx.CreateBucketIfNotExists()<\/code> function. It's a common pattern to call this\nfunction for all your top-level buckets after you open your database so you can\nguarantee that they exist for future transactions.<\/p>\n<p>To delete a bucket, simply call the <code>Tx.DeleteBucket()<\/code> function.<\/p>\n<h3>Using key\/value pairs<\/h3>\n<p>To save a key\/value pair to a bucket, use the <code>Bucket.Put()<\/code> function:<\/p>\n<pre><code class=\"language-go\">db.Update(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyBucket\"))\n    err := b.Put([]byte(\"answer\"), []byte(\"42\"))\n    return err\n})<\/code><\/pre>\n<p>This will set the value of the <code>\"answer\"<\/code> key to <code>\"42\"<\/code> in the <code>MyBucket<\/code>\nbucket. To retrieve this value, we can use the <code>Bucket.Get()<\/code> function:<\/p>\n<pre><code class=\"language-go\">db.View(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyBucket\"))\n    v := b.Get([]byte(\"answer\"))\n    fmt.Printf(\"The answer is: %s\\n\", v)\n    return nil\n})<\/code><\/pre>\n<p>The <code>Get()<\/code> function does not return an error because its operation is\nguaranteed to work (unless there is some kind of system failure). If the key\nexists then it will return its byte slice value. If it doesn't exist then it\nwill return <code>nil<\/code>. It's important to note that you can have a zero-length value\nset to a key which is different than the key not existing.<\/p>\n<p>Use the <code>Bucket.Delete()<\/code> function to delete a key from the bucket.<\/p>\n<p>Please note that values returned from <code>Get()<\/code> are only valid while the\ntransaction is open. If you need to use a value outside of the transaction\nthen you must use <code>copy()<\/code> to copy it to another byte slice.<\/p>\n<h3>Autoincrementing integer for the bucket<\/h3>\n<p>By using the <code>NextSequence()<\/code> function, you can let Bolt determine a sequence\nwhich can be used as the unique identifier for your key\/value pairs. See the\nexample below.<\/p>\n<pre><code class=\"language-go\">\/\/ CreateUser saves u to the store. The new user ID is set on u once the data is persisted.\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        \/\/ Retrieve the users bucket.\n        \/\/ This should be created when the DB is first opened.\n        b := tx.Bucket([]byte(\"users\"))\n\n        \/\/ Generate ID for the user.\n        \/\/ This returns an error only if the Tx is closed or not writeable.\n        \/\/ That can't happen in an Update() call so I ignore the error check.\n        id, _ := b.NextSequence()\n        u.ID = int(id)\n\n        \/\/ Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        \/\/ Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n\/\/ itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}<\/code><\/pre>\n<h3>Iterating over keys<\/h3>\n<p>Bolt stores its keys in byte-sorted order within a bucket. This makes sequential\niteration over these keys extremely fast. To iterate over keys we'll use a\n<code>Cursor<\/code>:<\/p>\n<pre><code class=\"language-go\">db.View(func(tx *bolt.Tx) error {\n    \/\/ Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    c := b.Cursor()\n\n    for k, v := c.First(); k != nil; k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})<\/code><\/pre>\n<p>The cursor allows you to move to a specific point in the list of keys and move\nforward or backward through the keys one at a time.<\/p>\n<p>The following functions are available on the cursor:<\/p>\n<pre><code>First()  Move to the first key.\nLast()   Move to the last key.\nSeek()   Move to a specific key.\nNext()   Move to the next key.\nPrev()   Move to the previous key.<\/code><\/pre>\n<p>Each of those functions has a return signature of <code>(key []byte, value []byte)<\/code>.\nWhen you have iterated to the end of the cursor then <code>Next()<\/code> will return a\n<code>nil<\/code> key.  You must seek to a position using <code>First()<\/code>, <code>Last()<\/code>, or <code>Seek()<\/code>\nbefore calling <code>Next()<\/code> or <code>Prev()<\/code>. If you do not seek to a position then\nthese functions will return a <code>nil<\/code> key.<\/p>\n<p>During iteration, if the key is non-<code>nil<\/code> but the value is <code>nil<\/code>, that means\nthe key refers to a bucket rather than a value.  Use <code>Bucket.Bucket()<\/code> to\naccess the sub-bucket.<\/p>\n<h4>Prefix scans<\/h4>\n<p>To iterate over a key prefix, you can combine <code>Seek()<\/code> and <code>bytes.HasPrefix()<\/code>:<\/p>\n<pre><code class=\"language-go\">db.View(func(tx *bolt.Tx) error {\n    \/\/ Assume bucket exists and has keys\n    c := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n    prefix := []byte(\"1234\")\n    for k, v := c.Seek(prefix); k != nil &amp;&amp; bytes.HasPrefix(k, prefix); k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})<\/code><\/pre>\n<h4>Range scans<\/h4>\n<p>Another common use case is scanning over a range such as a time range. If you\nuse a sortable time encoding such as RFC3339 then you can query a specific\ndate range like this:<\/p>\n<pre><code class=\"language-go\">db.View(func(tx *bolt.Tx) error {\n    \/\/ Assume our events bucket exists and has RFC3339 encoded time keys.\n    c := tx.Bucket([]byte(\"Events\")).Cursor()\n\n    \/\/ Our time range spans the 90's decade.\n    min := []byte(\"1990-01-01T00:00:00Z\")\n    max := []byte(\"2000-01-01T00:00:00Z\")\n\n    \/\/ Iterate over the 90's.\n    for k, v := c.Seek(min); k != nil &amp;&amp; bytes.Compare(k, max) &lt;= 0; k, v = c.Next() {\n        fmt.Printf(\"%s: %s\\n\", k, v)\n    }\n\n    return nil\n})<\/code><\/pre>\n<p>Note that, while RFC3339 is sortable, the Golang implementation of RFC3339Nano does not use a fixed number of digits after the decimal point and is therefore not sortable.<\/p>\n<h4>ForEach()<\/h4>\n<p>You can also use the function <code>ForEach()<\/code> if you know you'll be iterating over\nall the keys in a bucket:<\/p>\n<pre><code class=\"language-go\">db.View(func(tx *bolt.Tx) error {\n    \/\/ Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    b.ForEach(func(k, v []byte) error {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n        return nil\n    })\n    return nil\n})<\/code><\/pre>\n<p>Please note that keys and values in <code>ForEach()<\/code> are only valid while\nthe transaction is open. If you need to use a key or value outside of\nthe transaction, you must use <code>copy()<\/code> to copy it to another byte\nslice.<\/p>\n<h3>Nested buckets<\/h3>\n<p>You can also store a bucket in a key to create nested buckets. The API is the\nsame as the bucket management API on the <code>DB<\/code> object:<\/p>\n<pre><code class=\"language-go\">func (*Bucket) CreateBucket(key []byte) (*Bucket, error)\nfunc (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)\nfunc (*Bucket) DeleteBucket(key []byte) error<\/code><\/pre>\n<p>Say you had a multi-tenant application where the root level bucket was the account bucket. Inside of this bucket was a sequence of accounts which themselves are buckets. And inside the sequence bucket you could have many buckets pertaining to the Account itself (Users, Notes, etc) isolating the information into logical groupings.<\/p>\n<pre><code class=\"language-go\">\n\/\/ createUser creates a new user in the given account.\nfunc createUser(accountID int, u *User) error {\n    \/\/ Start the transaction.\n    tx, err := db.Begin(true)\n    if err != nil {\n        return err\n    }\n    defer tx.Rollback()\n\n    \/\/ Retrieve the root bucket for the account.\n    \/\/ Assume this has already been created when the account was set up.\n    root := tx.Bucket([]byte(strconv.FormatUint(accountID, 10)))\n\n    \/\/ Setup the users bucket.\n    bkt, err := root.CreateBucketIfNotExists([]byte(\"USERS\"))\n    if err != nil {\n        return err\n    }\n\n    \/\/ Generate an ID for the new user.\n    userID, err := bkt.NextSequence()\n    if err != nil {\n        return err\n    }\n    u.ID = userID\n\n    \/\/ Marshal and save the encoded user.\n    if buf, err := json.Marshal(u); err != nil {\n        return err\n    } else if err := bkt.Put([]byte(strconv.FormatUint(u.ID, 10)), buf); err != nil {\n        return err\n    }\n\n    \/\/ Commit the transaction.\n    if err := tx.Commit(); err != nil {\n        return err\n    }\n\n    return nil\n}\n<\/code><\/pre>\n<h3>Database backups<\/h3>\n<p>Bolt is a single file so it's easy to backup. You can use the <code>Tx.WriteTo()<\/code>\nfunction to write a consistent view of the database to a writer. If you call\nthis from a read-only transaction, it will perform a hot backup and not block\nyour other database reads and writes.<\/p>\n<p>By default, it will use a regular file handle which will utilize the operating\nsystem's page cache. See the <a href=\"https:\/\/godoc.org\/github.com\/boltdb\/bolt#Tx\"><code>Tx<\/code><\/a>\ndocumentation for information about optimizing for larger-than-RAM datasets.<\/p>\n<p>One common use case is to backup over HTTP so you can use tools like <code>cURL<\/code> to\ndo database backups:<\/p>\n<pre><code class=\"language-go\">func BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n    err := db.View(func(tx *bolt.Tx) error {\n        w.Header().Set(\"Content-Type\", \"application\/octet-stream\")\n        w.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n        w.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n        _, err := tx.WriteTo(w)\n        return err\n    })\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}<\/code><\/pre>\n<p>Then you can backup using this command:<\/p>\n<pre><code class=\"language-sh\">$ curl http:\/\/localhost\/backup &gt; my.db<\/code><\/pre>\n<p>Or you can open your browser to <code>http:\/\/localhost\/backup<\/code> and it will download\nautomatically.<\/p>\n<p>If you want to backup to another file you can use the <code>Tx.CopyFile()<\/code> helper\nfunction.<\/p>\n<h3>Statistics<\/h3>\n<p>The database keeps a running count of many of the internal operations it\nperforms so you can better understand what's going on. By grabbing a snapshot\nof these stats at two points in time we can see what operations were performed\nin that time range.<\/p>\n<p>For example, we could start a goroutine to log stats every 10 seconds:<\/p>\n<pre><code class=\"language-go\">go func() {\n    \/\/ Grab the initial stats.\n    prev := db.Stats()\n\n    for {\n        \/\/ Wait for 10s.\n        time.Sleep(10 * time.Second)\n\n        \/\/ Grab the current stats and diff them.\n        stats := db.Stats()\n        diff := stats.Sub(&amp;prev)\n\n        \/\/ Encode stats to JSON and print to STDERR.\n        json.NewEncoder(os.Stderr).Encode(diff)\n\n        \/\/ Save stats for the next loop.\n        prev = stats\n    }\n}()<\/code><\/pre>\n<p>It's also useful to pipe these stats to a service such as statsd for monitoring\nor to provide an HTTP endpoint that will perform a fixed-length sample.<\/p>\n<h3>Read-Only Mode<\/h3>\n<p>Sometimes it is useful to create a shared, read-only Bolt database. To this,\nset the <code>Options.ReadOnly<\/code> flag when opening your database. Read-only mode\nuses a shared lock to allow multiple processes to read from the database but\nit will block any processes from opening the database in read-write mode.<\/p>\n<pre><code class=\"language-go\">db, err := bolt.Open(\"my.db\", 0666, &amp;bolt.Options{ReadOnly: true})\nif err != nil {\n    log.Fatal(err)\n}<\/code><\/pre>\n<h3>Mobile Use (iOS\/Android)<\/h3>\n<p>Bolt is able to run on mobile devices by leveraging the binding feature of the\n<a href=\"https:\/\/github.com\/golang\/mobile\">gomobile<\/a> tool. Create a struct that will\ncontain your database logic and a reference to a <code>*bolt.DB<\/code> with a initializing\nconstructor that takes in a filepath where the database file will be stored.\nNeither Android nor iOS require extra permissions or cleanup from using this method.<\/p>\n<pre><code class=\"language-go\">func NewBoltDB(filepath string) *BoltDB {\n    db, err := bolt.Open(filepath+\"\/demo.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    return &amp;BoltDB{db}\n}\n\ntype BoltDB struct {\n    db *bolt.DB\n    ...\n}\n\nfunc (b *BoltDB) Path() string {\n    return b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n    b.db.Close()\n}<\/code><\/pre>\n<p>Database logic should be defined as methods on this wrapper struct.<\/p>\n<p>To initialize this struct from the native language (both platforms now sync\ntheir local storage to the cloud. These snippets disable that functionality for the\ndatabase file):<\/p>\n<h4>Android<\/h4>\n<pre><code class=\"language-java\">String path;\nif (android.os.Build.VERSION.SDK_INT &gt;=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)<\/code><\/pre>\n<h4>iOS<\/h4>\n<pre><code class=\"language-objc\">- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n    [self addSkipBackupAttributeToItemAtPath:demo.path];\n    \/\/Some DB Logic would go here\n    [demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n<\/code><\/pre>\n<h2>Resources<\/h2>\n<p>For more information on getting started with Bolt, check out the following articles:<\/p>\n<ul>\n<li><a href=\"http:\/\/npf.io\/2014\/07\/intro-to-boltdb-painless-performant-persistence\/\">Intro to BoltDB: Painless Performant Persistence<\/a> by <a href=\"https:\/\/github.com\/natefinch\">Nate Finch<\/a>.<\/li>\n<li><a href=\"https:\/\/www.progville.com\/go\/bolt-embedded-db-golang\/\">Bolt -- an embedded key\/value database for Go<\/a> by Progville<\/li>\n<\/ul>\n<h2>Comparison with other databases<\/h2>\n<h3>Postgres, MySQL, &amp; other relational databases<\/h3>\n<p>Relational databases structure data into rows and are only accessible through\nthe use of SQL. This approach provides flexibility in how you store and query\nyour data but also incurs overhead in parsing and planning SQL statements. Bolt\naccesses all data by a byte slice key. This makes Bolt fast to read and write\ndata by key but provides no built-in support for joining values together.<\/p>\n<p>Most relational databases (with the exception of SQLite) are standalone servers\nthat run separately from your application. This gives your systems\nflexibility to connect multiple application servers to a single database\nserver but also adds overhead in serializing and transporting data over the\nnetwork. Bolt runs as a library included in your application so all data access\nhas to go through your application's process. This brings data closer to your\napplication but limits multi-process access to the data.<\/p>\n<h3>LevelDB, RocksDB<\/h3>\n<p>LevelDB and its derivatives (RocksDB, HyperLevelDB) are similar to Bolt in that\nthey are libraries bundled into the application, however, their underlying\nstructure is a log-structured merge-tree (LSM tree). An LSM tree optimizes\nrandom writes by using a write ahead log and multi-tiered, sorted files called\nSSTables. Bolt uses a B+tree internally and only a single file. Both approaches\nhave trade-offs.<\/p>\n<p>If you require a high random write throughput (&gt;10,000 w\/sec) or you need to use\nspinning disks then LevelDB could be a good choice. If your application is\nread-heavy or does a lot of range scans then Bolt could be a good choice.<\/p>\n<p>One other important consideration is that LevelDB does not have transactions.\nIt supports batch writing of key\/values pairs and it supports read snapshots\nbut it will not give you the ability to do a compare-and-swap operation safely.\nBolt supports fully serializable ACID transactions.<\/p>\n<h3>LMDB<\/h3>\n<p>Bolt was originally a port of LMDB so it is architecturally similar. Both use\na B+tree, have ACID semantics with fully serializable transactions, and support\nlock-free MVCC using a single writer and multiple readers.<\/p>\n<p>The two projects have somewhat diverged. LMDB heavily focuses on raw performance\nwhile Bolt has focused on simplicity and ease of use. For example, LMDB allows\nseveral unsafe actions such as direct writes for the sake of performance. Bolt\nopts to disallow actions which can leave the database in a corrupted state. The\nonly exception to this in Bolt is <code>DB.NoSync<\/code>.<\/p>\n<p>There are also a few differences in API. LMDB requires a maximum mmap size when\nopening an <code>mdb_env<\/code> whereas Bolt will handle incremental mmap resizing\nautomatically. LMDB overloads the getter and setter functions with multiple\nflags whereas Bolt splits these specialized cases into their own functions.<\/p>\n<h2>Caveats &amp; Limitations<\/h2>\n<p>It's important to pick the right tool for the job and Bolt is no exception.\nHere are a few things to note when evaluating and using Bolt:<\/p>\n<ul>\n<li>\n<p>Bolt is good for read intensive workloads. Sequential write performance is\nalso fast but random writes can be slow. You can use <code>DB.Batch()<\/code> or add a\nwrite-ahead log to help mitigate this issue.<\/p>\n<\/li>\n<li>\n<p>Bolt uses a B+tree internally so there can be a lot of random page access.\nSSDs provide a significant performance boost over spinning disks.<\/p>\n<\/li>\n<li>\n<p>Try to avoid long running read transactions. Bolt uses copy-on-write so\nold pages cannot be reclaimed while an old transaction is using them.<\/p>\n<\/li>\n<li>\n<p>Byte slices returned from Bolt are only valid during a transaction. Once the\ntransaction has been committed or rolled back then the memory they point to\ncan be reused by a new page or can be unmapped from virtual memory and you'll\nsee an <code>unexpected fault address<\/code> panic when accessing it.<\/p>\n<\/li>\n<li>\n<p>Bolt uses an exclusive write lock on the database file so it cannot be\nshared by multiple processes.<\/p>\n<\/li>\n<li>\n<p>Be careful when using <code>Bucket.FillPercent<\/code>. Setting a high fill percent for\nbuckets that have random inserts will cause your database to have very poor\npage utilization.<\/p>\n<\/li>\n<li>\n<p>Use larger buckets in general. Smaller buckets causes poor page utilization\nonce they become larger than the page size (typically 4KB).<\/p>\n<\/li>\n<li>\n<p>Bulk loading a lot of random writes into a new bucket can be slow as the\npage will not split until the transaction is committed. Randomly inserting\nmore than 100,000 key\/value pairs into a single new bucket in a single\ntransaction is not advised.<\/p>\n<\/li>\n<li>\n<p>Bolt uses a memory-mapped file so the underlying operating system handles the\ncaching of the data. Typically, the OS will cache as much of the file as it\ncan in memory and will release memory as needed to other processes. This means\nthat Bolt can show very high memory usage when working with large databases.\nHowever, this is expected and the OS will release memory as needed. Bolt can\nhandle databases much larger than the available physical RAM, provided its\nmemory-map fits in the process virtual address space. It may be problematic\non 32-bits systems.<\/p>\n<\/li>\n<li>\n<p>The data structures in the Bolt database are memory mapped so the data file\nwill be endian specific. This means that you cannot copy a Bolt file from a\nlittle endian machine to a big endian machine and have it work. For most\nusers this is not a concern since most modern CPUs are little endian.<\/p>\n<\/li>\n<li>\n<p>Because of the way pages are laid out on disk, Bolt cannot truncate data files\nand return free pages back to the disk. Instead, Bolt maintains a free list\nof unused pages within its data file. These free pages can be reused by later\ntransactions. This works well for many use cases as databases generally tend\nto grow. However, it's important to note that deleting large chunks of data\nwill not allow you to reclaim that space on disk.<\/p>\n<p>For more information on page allocation, <a href=\"https:\/\/github.com\/boltdb\/bolt\/issues\/308#issuecomment-74811638\">see this comment<\/a>.<\/p>\n<\/li>\n<\/ul>\n<h2>Reading the Source<\/h2>\n<p>Bolt is a relatively small code base (&lt;3KLOC) for an embedded, serializable,\ntransactional key\/value database so it can be a good starting point for people\ninterested in how databases work.<\/p>\n<p>The best places to start are the main entry points into Bolt:<\/p>\n<ul>\n<li>\n<p><code>Open()<\/code> - Initializes the reference to the database. It's responsible for\ncreating the database if it doesn't exist, obtaining an exclusive lock on the\nfile, reading the meta pages, &amp; memory-mapping the file.<\/p>\n<\/li>\n<li>\n<p><code>DB.Begin()<\/code> - Starts a read-only or read-write transaction depending on the\nvalue of the <code>writable<\/code> argument. This requires briefly obtaining the \"meta\"\nlock to keep track of open transactions. Only one read-write transaction can\nexist at a time so the \"rwlock\" is acquired during the life of a read-write\ntransaction.<\/p>\n<\/li>\n<li>\n<p><code>Bucket.Put()<\/code> - Writes a key\/value pair into a bucket. After validating the\narguments, a cursor is used to traverse the B+tree to the page and position\nwhere they key &amp; value will be written. Once the position is found, the bucket\nmaterializes the underlying page and the page's parent pages into memory as\n\"nodes\". These nodes are where mutations occur during read-write transactions.\nThese changes get flushed to disk during commit.<\/p>\n<\/li>\n<li>\n<p><code>Bucket.Get()<\/code> - Retrieves a key\/value pair from a bucket. This uses a cursor\nto move to the page &amp; position of a key\/value pair. During a read-only\ntransaction, the key and value data is returned as a direct reference to the\nunderlying mmap file so there's no allocation overhead. For read-write\ntransactions, this data may reference the mmap file or one of the in-memory\nnode values.<\/p>\n<\/li>\n<li>\n<p><code>Cursor<\/code> - This object is simply for traversing the B+tree of on-disk pages\nor in-memory nodes. It can seek to a specific key, move to the first or last\nvalue, or it can move forward or backward. The cursor handles the movement up\nand down the B+tree transparently to the end user.<\/p>\n<\/li>\n<li>\n<p><code>Tx.Commit()<\/code> - Converts the in-memory dirty nodes and the list of free pages\ninto pages to be written to disk. Writing to disk then occurs in two phases.\nFirst, the dirty pages are written to disk and an <code>fsync()<\/code> occurs. Second, a\nnew meta page with an incremented transaction ID is written and another\n<code>fsync()<\/code> occurs. This two phase write ensures that partially written data\npages are ignored in the event of a crash since the meta page pointing to them\nis never written. Partially written meta pages are invalidated because they\nare written with a checksum.<\/p>\n<\/li>\n<\/ul>\n<p>If you have additional notes that could be helpful for others, please submit\nthem via pull request.<\/p>\n<h2>Other Projects Using Bolt<\/h2>\n<p>Below is a list of public, open source projects that use Bolt:<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/evnix\/boltdbweb\">BoltDbWeb<\/a> - A web based GUI for BoltDB files.<\/li>\n<li><a href=\"http:\/\/gocode.io\">Operation Go: A Routine Mission<\/a> - An online programming game for Golang using Bolt for user accounts and a leaderboard.<\/li>\n<li><a href=\"https:\/\/bazil.org\/\">Bazil<\/a> - A file system that lets your data reside where it is most convenient for it to reside.<\/li>\n<li><a href=\"https:\/\/github.com\/janelia-flyem\/dvid\">DVID<\/a> - Added Bolt as optional storage engine and testing it against Basho-tuned leveldb.<\/li>\n<li><a href=\"https:\/\/github.com\/skybox\/skybox\">Skybox Analytics<\/a> - A standalone funnel analysis tool for web analytics.<\/li>\n<li><a href=\"https:\/\/github.com\/benbjohnson\/scuttlebutt\">Scuttlebutt<\/a> - Uses Bolt to store and process all Twitter mentions of GitHub projects.<\/li>\n<li><a href=\"https:\/\/github.com\/peterhellberg\/wiki\">Wiki<\/a> - A tiny wiki using Goji, BoltDB and Blackfriday.<\/li>\n<li><a href=\"https:\/\/github.com\/pressly\/chainstore\">ChainStore<\/a> - Simple key-value interface to a variety of storage engines organized as a chain of operations.<\/li>\n<li><a href=\"https:\/\/github.com\/msiebuhr\/MetricBase\">MetricBase<\/a> - Single-binary version of Graphite.<\/li>\n<li><a href=\"https:\/\/github.com\/gitchain\/gitchain\">Gitchain<\/a> - Decentralized, peer-to-peer Git repositories aka \"Git meets Bitcoin\".<\/li>\n<li><a href=\"https:\/\/github.com\/sclasen\/event-shuttle\">event-shuttle<\/a> - A Unix system service to collect and reliably deliver messages to Kafka.<\/li>\n<li><a href=\"https:\/\/github.com\/kelseyhightower\/ipxed\">ipxed<\/a> - Web interface and api for ipxed.<\/li>\n<li><a href=\"https:\/\/github.com\/yosssi\/boltstore\">BoltStore<\/a> - Session store using Bolt.<\/li>\n<li><a href=\"https:\/\/godoc.org\/bitbucket.org\/kardianos\/photosite\/session\">photosite\/session<\/a> - Sessions for a photo viewing site.<\/li>\n<li><a href=\"https:\/\/github.com\/siddontang\/ledisdb\">LedisDB<\/a> - A high performance NoSQL, using Bolt as optional storage.<\/li>\n<li><a href=\"https:\/\/github.com\/AndreasBriese\/ipLocator\">ipLocator<\/a> - A fast ip-geo-location-server using bolt with bloom filters.<\/li>\n<li><a href=\"https:\/\/github.com\/google\/cayley\">cayley<\/a> - Cayley is an open-source graph database using Bolt as optional backend.<\/li>\n<li><a href=\"http:\/\/www.blevesearch.com\/\">bleve<\/a> - A pure Go search engine similar to ElasticSearch that uses Bolt as the default storage backend.<\/li>\n<li><a href=\"https:\/\/github.com\/optiflows\/tentacool\">tentacool<\/a> - REST api server to manage system stuff (IP, DNS, Gateway...) on a linux server.<\/li>\n<li><a href=\"https:\/\/github.com\/chrislusf\/seaweedfs\">Seaweed File System<\/a> - Highly scalable distributed key~file system with O(1) disk read.<\/li>\n<li><a href=\"https:\/\/influxdata.com\">InfluxDB<\/a> - Scalable datastore for metrics, events, and real-time analytics.<\/li>\n<li><a href=\"http:\/\/tshannon.bitbucket.org\/freehold\/\">Freehold<\/a> - An open, secure, and lightweight platform for your files and data.<\/li>\n<li><a href=\"https:\/\/github.com\/oliver006\/prom_annotation_server\">Prometheus Annotation Server<\/a> - Annotation server for PromDash &amp; Prometheus service monitoring system.<\/li>\n<li><a href=\"https:\/\/github.com\/hashicorp\/consul\">Consul<\/a> - Consul is service discovery and configuration made easy. Distributed, highly available, and datacenter-aware.<\/li>\n<li><a href=\"https:\/\/github.com\/ajvb\/kala\">Kala<\/a> - Kala is a modern job scheduler optimized to run on a single node. It is persistent, JSON over HTTP API, ISO 8601 duration notation, and dependent jobs.<\/li>\n<li><a href=\"https:\/\/github.com\/odeke-em\/drive\">drive<\/a> - drive is an unofficial Google Drive command line client for *NIX operating systems.<\/li>\n<li><a href=\"https:\/\/github.com\/djherbis\/stow\">stow<\/a> -  a persistence manager for objects\nbacked by boltdb.<\/li>\n<li><a href=\"https:\/\/github.com\/joyrexus\/buckets\">buckets<\/a> - a bolt wrapper streamlining\nsimple tx and key scans.<\/li>\n<li><a href=\"https:\/\/github.com\/abhigupta912\/mbuckets\">mbuckets<\/a> - A Bolt wrapper that allows easy operations on multi level (nested) buckets.<\/li>\n<li><a href=\"https:\/\/github.com\/darklynx\/request-baskets\">Request Baskets<\/a> - A web service to collect arbitrary HTTP requests and inspect them via REST API or simple web UI, similar to <a href=\"http:\/\/requestb.in\/\">RequestBin<\/a> service<\/li>\n<li><a href=\"https:\/\/goreportcard.com\/\">Go Report Card<\/a> - Go code quality report cards as a (free and open source) service.<\/li>\n<li><a href=\"https:\/\/github.com\/bobintornado\/boltdb-boilerplate\">Boltdb Boilerplate<\/a> - Boilerplate wrapper around bolt aiming to make simple calls one-liners.<\/li>\n<li><a href=\"https:\/\/github.com\/crowdriff\/lru\">lru<\/a> - Easy to use Bolt-backed Least-Recently-Used (LRU) read-through cache with chainable remote stores.<\/li>\n<li><a href=\"https:\/\/github.com\/asdine\/storm\">Storm<\/a> - Simple and powerful ORM for BoltDB.<\/li>\n<li><a href=\"https:\/\/github.com\/josephspurrier\/gowebapp\">GoWebApp<\/a> - A basic MVC web application in Go using BoltDB.<\/li>\n<li><a href=\"https:\/\/github.com\/xyproto\/simplebolt\">SimpleBolt<\/a> - A simple way to use BoltDB. Deals mainly with strings.<\/li>\n<li><a href=\"https:\/\/github.com\/xyproto\/algernon\">Algernon<\/a> - A HTTP\/2 web server with built-in support for Lua. Uses BoltDB as the default database backend.<\/li>\n<li><a href=\"https:\/\/github.com\/dankomiocevic\/mulifs\">MuLiFS<\/a> - Music Library Filesystem creates a filesystem to organise your music files.<\/li>\n<li><a href=\"https:\/\/github.com\/pankajkhairnar\/goShort\">GoShort<\/a> - GoShort is a URL shortener written in Golang and BoltDB for persistent key\/value storage and for routing it's using high performent HTTPRouter.<\/li>\n<li><a href=\"https:\/\/github.com\/anacrolix\/torrent\">torrent<\/a> - Full-featured BitTorrent client package and utilities in Go. BoltDB is a storage backend in development.<\/li>\n<li><a href=\"https:\/\/github.com\/gopherpit\/gopherpit\">gopherpit<\/a> - A web service to manage Go remote import paths with custom domains<\/li>\n<li><a href=\"https:\/\/github.com\/hasit\/bolter\">bolter<\/a> - Command-line app for viewing BoltDB file in your terminal.<\/li>\n<li><a href=\"https:\/\/github.com\/btcsuite\/btcwallet\">btcwallet<\/a> - A bitcoin wallet.<\/li>\n<li><a href=\"https:\/\/github.com\/decred\/dcrwallet\">dcrwallet<\/a> - A wallet for the Decred cryptocurrency.<\/li>\n<li><a href=\"https:\/\/github.com\/timshannon\/ironsmith\">Ironsmith<\/a> - A simple, script-driven continuous integration (build - &gt; test -&gt; release) tool, with no external dependencies<\/li>\n<li><a href=\"https:\/\/github.com\/timshannon\/bolthold\">BoltHold<\/a> - An embeddable NoSQL store for Go types built on BoltDB<\/li>\n<li><a href=\"https:\/\/ponzu-cms.org\">Ponzu CMS<\/a> - Headless CMS + automatic JSON API with auto-HTTPS, HTTP\/2 Server Push, and flexible server framework.<\/li>\n<\/ul>\n<p>If you are using Bolt in a project please send a pull request to add it to the list.<\/p><\/body>","methods":[]}