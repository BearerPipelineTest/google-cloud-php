{"id":".split\/go\/pkg\/mod\/github.com\/splitsh\/lite@v1.0.1\/readme","type":"guide","title":"Git Subtree Splitter","name":"Git Subtree Splitter","description":"<body>\n<p><strong>splitsh-lite<\/strong> replaces the <code>subtree split<\/code> Git built-in command to make\n<strong>splitting a monolithic repository<\/strong> to read-only standalone repositories\n<strong>easy and fast<\/strong>.<\/p>\n<h2>Why do I need this tool?<\/h2>\n<p>When starting a project, do you store all the code in one repository? Or are\nyou creating many standalone repositories?<\/p>\n<p>Both strategies work well and both have drawbacks as well. <strong>splitsh<\/strong> helps\nuse both strategies by providing tools that automatically <strong>synchronize a\nmonolithic repository to standalone repositories<\/strong> in real-time.<\/p>\n<p><strong>splitsh-lite<\/strong> is a sub-project that provides a faster implementation of the\n<code>git subtree split<\/code> command, which helps create standalone repositories for one\nor more sub-directories of a main repository.<\/p>\n<p>If you want to learn more about monorepo vs manyrepos, watch this <a href=\"http:\/\/www.thedotpost.com\/2016\/05\/fabien-potencier-monolithic-repositories-vs-many-repositories\">4-minute\nlightning talk<\/a>\nI gave at dotScale\n(or <a href=\"https:\/\/speakerdeck.com\/fabpot\/a-monorepo-vs-manyrepos\">read the slides<\/a>)...\nor watch the longer version from\n<a href=\"https:\/\/www.youtube.com\/watch?v=4w3-f6Xhvu8\">DrupalCon<\/a>.<\/p>\n<h2>Installation<\/h2>\n<p>The fastest way to get started is to download a <a href=\"https:\/\/github.com\/splitsh\/lite\/releases\">binary<\/a> for your platform.<\/p>\n<p>You can also <a href=\"#manual-installation\">install it manually<\/a>.<\/p>\n<h2>Usage<\/h2>\n<p>Let say you want to split the <code>lib\/<\/code> directory of a repository to its own\nbranch; from the \"master\" Git repository (bare or clone), run:<\/p>\n<pre><code class=\"language-bash\">splitsh-lite --prefix=lib\/<\/code><\/pre>\n<p>The <em>sha1<\/em> of the split is displayed at the end of the execution:<\/p>\n<pre><code class=\"language-bash\">SHA1=`splitsh-lite --prefix=lib\/`<\/code><\/pre>\n<p>The sha1 can be used to create a branch or to push the commits to a new\nrepository.<\/p>\n<p>Automatically create a branch for the split by passing a branch name\nvia the <code>--target<\/code> option:<\/p>\n<pre><code class=\"language-bash\">splitsh-lite --prefix=lib\/ --target=branch-name<\/code><\/pre>\n<p>If new commits are made on the repository, update the split by running the same\ncommand again. Updates are much faster as <strong>splitsh-lite<\/strong> keeps a cache of\nalready split commits. Caching is possible as <strong>splitsh-lite<\/strong> guarantees that\ntwo splits of the same code always results in the same history and the same\n<code>sha1<\/code>s for each commit.<\/p>\n<p>By default, <strong>splitsh-lite<\/strong> splits the current checkout-ed branch but you can\nsplit a different branch by passing it explicitly via the <code>--origin<\/code> flag\n(mandatory when splitting a bare repository):<\/p>\n<pre><code class=\"language-bash\">splitsh-lite --prefix=lib\/ --origin=origin\/master<\/code><\/pre>\n<p>You don't even need to run the command from the Git repository directory if you\npass the <code>--path<\/code> option:<\/p>\n<pre><code class=\"language-bash\">splitsh-lite --prefix=lib\/ --origin=origin\/1.0 --path=\/path\/to\/repo<\/code><\/pre>\n<p>Available options:<\/p>\n<ul>\n<li>\n<p><code>--prefix<\/code> is the prefix of the directory to split; you can put the split\ncontents in a sub-directory of the target repository by using the\n<code>--prefix=from:to<\/code> syntax; split several directories by passing multiple\n<code>--prefix<\/code> flags;<\/p>\n<\/li>\n<li>\n<p><code>--path<\/code> is the path of the repository to split (current directory by default);<\/p>\n<\/li>\n<li>\n<p><code>--origin<\/code> is the Git reference for the origin (can be any Git reference\nlike <code>HEAD<\/code>, <code>heads\/xxx<\/code>, <code>tags\/xxx<\/code>, <code>origin\/xxx<\/code>, or any <code>refs\/xxx<\/code>);<\/p>\n<\/li>\n<li>\n<p><code>--target<\/code> creates a reference for the tip of the split (can be any Git\nreference like <code>HEAD<\/code>, <code>heads\/xxx<\/code>, <code>tags\/xxx<\/code>, <code>origin\/xxx<\/code>, or any\n<code>refs\/xxx<\/code>);<\/p>\n<\/li>\n<li>\n<p><code>--progress<\/code> displays a progress bar;<\/p>\n<\/li>\n<li>\n<p><code>--quiet<\/code> suppresses all output on stderr (useful when run from an automated\nscript);<\/p>\n<\/li>\n<li><code>--scratch<\/code> flushes the cache (useful when a branch is force pushed or in\ncase of a cache corruption);<\/li>\n<\/ul>\n<h2>Migrating from <code>git subtree split<\/code><\/h2>\n<p>Migrating from <code>git subtree split<\/code> to <code>splith-lite<\/code> is easy as both tools\ngenerate the same <code>sha1<\/code>s.<\/p>\n<p>However, note that older versions of <code>git subtree split<\/code> used broken\nalgorithms, and so generated different <code>sha1<\/code>s than the latest version. You can\nsimulate those version via the <code>--git<\/code> flag. Use <code>&lt;1.8.2<\/code> or <code>&lt;2.8.0<\/code> depending\non which version of <code>git subtree split<\/code> you want to simulate.<\/p>\n<h2>Manual Installation<\/h2>\n<p>If you want to contribute to <code>splitsh-lite<\/code> or use it as a library, you first\nneed to install <code>libgit2<\/code>:<\/p>\n<pre><code class=\"language-bash\">go get -d github.com\/libgit2\/git2go\ncd $GOPATH\/src\/github.com\/libgit2\/git2go\ngit checkout next\ngit submodule update --init\nmake install<\/code><\/pre>\n<p>Then, compile <code>splitsh-lite<\/code>:<\/p>\n<pre><code class=\"language-bash\">go get github.com\/splitsh\/lite\ngo build -o splitsh-lite github.com\/splitsh\/lite<\/code><\/pre>\n<p>If everything goes fine, a <code>splitsh-lite<\/code> binary should be available in the\ncurrent directory.<\/p>\n<h2>Full-Version<\/h2>\n<p>The full version of <strong>splitsh<\/strong> provides more features including a sanity\nchecker, GitHub integration for real-time splitting, tag management and\nsynchronization, and more. It has been used by the Symfony project for many\nyears but the tool is not yet ready for Open-Source. Stay tuned!<\/p>\n<p>If you think that your Open-Source project might benefit from the full version\nof splitsh, send me an email and I will consider splitting your project for\nfree on my servers (like I do for Symfony and Laravel).<\/p><\/body>","methods":[]}